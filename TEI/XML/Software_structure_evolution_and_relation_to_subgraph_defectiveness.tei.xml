<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Software structure evolution and relation to subgraph defectiveness</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Institution of Engineering and Technology (IET)</publisher>
				<availability status="unknown"><p>Copyright Institution of Engineering and Technology (IET)</p>
				</availability>
				<date type="published" when="2019-02-27">27th February 2019</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Ana</forename><surname>Vranković</surname></persName>
							<email>avrankovic@riteh.hr</email>
							<affiliation key="aff0">
								<orgName type="department">Faculty of Engineering</orgName>
								<orgName type="institution">University of Rijeka</orgName>
								<address>
									<addrLine>Vukovarska 58</addrLine>
									<postCode>HR-51000</postCode>
									<settlement>Rijeka</settlement>
									<country key="HR">Croatia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Tihana</forename><surname>Galinac Grbac</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Željka</forename><surname>Car</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Faculty of Electrical Engineering and Computing</orgName>
								<orgName type="institution">University of Zagreb</orgName>
								<address>
									<addrLine>Unska 3</addrLine>
									<settlement>Zagreb</settlement>
									<country key="HR">Croatia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Software structure evolution and relation to subgraph defectiveness</title>
					</analytic>
					<monogr>
						<title level="j" type="main">IET Software</title>
						<title level="j" type="abbrev">IET softw.</title>
						<idno type="ISSN">1751-8806</idno>
						<idno type="eISSN">1751-8814</idno>
						<imprint>
							<publisher>Institution of Engineering and Technology (IET)</publisher>
							<biblScope unit="volume">13</biblScope>
							<biblScope unit="issue">5</biblScope>
							<biblScope unit="page" from="355" to="367"/>
							<date type="published" when="2019-02-27">27th February 2019</date>
						</imprint>
					</monogr>
					<idno type="MD5">B0174C0FFF2C92EDBF783A686F7EF6DB</idno>
					<idno type="DOI">10.1049/iet-sen.2018.5060</idno>
					<note type="submission">Received on 2nd March 2018 Revised 3rd October 2018 Accepted on 16th November 2018</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-11-23T19:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Network analysis has been successfully applied in software engineering to understand structural effects in the software. System software is represented as a network graph, and network metrics are used to analyse system quality. This study is motivated by a previous study, which represents the software structure as three-node subgraphs and empirically identifies that software structure continuously evolves over system releases. Here, the authors extend the previous study to analyse the relation of structural evolution and the defectiveness of subgraphs in the software network graph. This study investigates the behaviour of subgraph defects through software evolution and their impact on system defectiveness. Statistical methods were used to study subgraph defectiveness across versions of the systems and across subgraph types. The authors conclude that software versions have similar behaviours in terms of average subgraph type defectiveness and subgraph frequency distributions. However, different subgraph types have different defectiveness distributions. Based on these conclusions, the authors motivate the use of subgraph-based software representation in defect predictions and software modelling. These promising findings contribute to the further development of the software engineering discipline and help software developers and quality management in terms of better modelling and focusing their testing efforts within the code structure represented by subgraphs.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>One of the most challenging software engineering tasks is to produce and deliver fault-free software products. Evolving complex software systems (EVOSOFT) have become a central part of a rapidly growing range of applications, products, and services supporting daily human activities from all economic sectors. Still, people are the key element in software production, and human mistakes are the main source of software faults. Good and reliable techniques for software fault prevention and early detection are one of the major concerns of organisations developing such systems. Major project cost sharing involves verification activities aimed at delivering reliable software products.</p><p>One area of research in that direction is software defect prediction (SDP), which aims to predict fault-prone locations in the software code. Fault distributions in complex software systems are analysed in the context of structural abstractions of the software system. There are numerous possible structural abstractions in which we may observe large-scale complex software systems. Thus far, fault distributions in large-scale complex software systems have been analysed based on structural abstraction using main building elements such as modules, files, classes, packages, or software units. It has been identified that the majority of faults are located in a minority of system modules/classes and that this minority of system modules/classes constitutes a minority of system share <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref><ref type="bibr" target="#b3">[4]</ref><ref type="bibr" target="#b4">[5]</ref><ref type="bibr" target="#b5">[6]</ref>. In these studies, there are some indications that the most faulty system units are the most communication-intensive units and that there exists a principle for fault distribution over the system structure. That fact motivated us to analyse the software structure as a communicating network graph and to apply network analysis in order to observe the patterns inside the system units communication as the software structure evolves. The main building system units (files, classes, packages, and software units) may be represented as nodes, and communication dependencies among them, as links between these nodes.</p><p>Recent findings have shown that the network analysis approach to software evolution and defect prediction is a very promising area of research. A network graph is a structural system property that is defined independently of static code properties or the software development properties and can be defined for any software code. Owing to the fact that, it provides an important tool for crosscompany, cross-product, and cross-software development phase comparisons of software structures no matter which programming language is used and which development process is followed. Therefore, this additional system property may be used to observe the effects of other system properties.</p><p>One part of network analysis is the exploration of network structures with the help of significant network substructures called motifs, aiming to uncover structural design principles in complex networks. Network motifs, proposed by Milo et al. <ref type="bibr" target="#b6">[7]</ref>, are patterns of interconnections in complex networks with an occurrence that is statistically higher than in random networks. It is identified that motifs could be useful for characterising universal classes of different complex network structures in different scientific fields such as medicine, sociology, and electrical engineering (e.g. Escherichia coli, World Wide Web, and feed-forward networks). In all these studies, only three-node structures were analysed because searching for higher-order node subgraphs, especially for motif identification, is a computationally intensive task. As part of our previous study <ref type="bibr" target="#b7">[8]</ref>, we performed the same analysis of identifying network motifs on network graphs from open-source software systems.</p><p>We obtained some interesting preliminary results. Motifs are shown to be consistent across system versions and across different software systems. Their significance seems to grow with the system growth and system maturity. Then, we observed that the same set of three-node subgraphs are present in all versions of Eclipse JDT and PDE system evolutions. This set of three-node subgraphs changes in different systems. With the help of threenode subgraphs, we proved that analysed systems evolve continuously and that the change in their structure is statistically significant. We could not confirm that the analysed systems tend to stabilise in terms of three-node subgraph frequencies. This is an important finding because it means that with the help of subgraph frequencies, we can better differentiate the software systems on the quantitative basis. We discovered that the system description with the help of three-node subgraphs enables us to capture the system's behaviour across its evolution. Thus, a more sensitive system property can explain why SDP models cannot be easily reused in different versions of the same evolving system. Furthermore, we identified that the system defectiveness, measured as a number of defects reported and corrected in the system, is correlated with the frequency of occurrence of particular three-node subgraph types. This finding motivated us to further investigate if certain subgraph structures are more defective than others and if we can explain the stabilisation of system defectiveness through evolution with the help of subgraph defectiveness and its occurrence frequency in the system network graph.</p><p>Since the three-node subgraphs are the one well-recognised tool for network graph structure analysis and due to all of the abovementioned findings from our previous work, we were motivated to further explore the tool's ability to capture the effects of system defectiveness. Three-node subgraph analysis can be used on any software system that can be translated as a collection of nodes with directed communication. We aim to observe subgraph defectiveness. There are 13 subgraph types that are presented in Fig. <ref type="figure" target="#fig_0">1</ref>, where the number below the subgraph is the subgraph id used throughout this paper. Not all subgraph types appeared in all versions of the system. We want to explore if some subgraph types are more defective than others. Furthermore, we want to explore what happens with subgraph defectiveness across different versions of the system and if different subgraph types behave differently across the system during its evolution. To be more precise, we aim to investigate the following research questions:</p><p>RQ1 Which subgraphs with three nodes are the most defective in a software system?</p><p>By looking into the code structure, we can see if there is a trend where some particular types of subgraph have more defects than the others. The results could give us an insight into the defectiveness correlating with subgraph complexity and could be used to warn the programmer about problematic connections in the code.</p><p>RQ2 Is the average subgraph defectiveness similar across the different software systems and in the different software versions of the same evolving software system?</p><p>We want to see if there are the same subgraph types with similar average defectiveness present across all versions of the software system. We are also interested if there is some similarity between different subgraph types in the same version of the system.</p><p>RQ3 How does the subgraph defectiveness evolve over the software versions, and does it stabilise as the software system evolves?</p><p>As the software system evolves, the size of the code grows. Changes in the frequency of the subgraphs have been investigated in the previous study. In this study, we wish to examine the number of defects in the given subgraph types. Researching the evolution of the software system defectiveness will help us to see if all subgraph types have an increase in defectiveness as new code is added and a decrease as defects are corrected. There is a possibility of using information about evolution to point to problems where part of the code is not properly fixed.</p><p>RQ4 Is there a relation between the average subgraph defectiveness and the software system defectiveness?</p><p>By looking at average subgraph defectiveness, we could be able to get software system defectiveness. Each subgraph type has its own defectiveness, and when combined, they show software system defectiveness. It is possible that the subgraphs with lower frequencies have more influence on the software system defectiveness. The network subgraphs are overlapping within the network and one node is a part of a larger number of subgraphs. Its defects are indeed added to every subgraph and therefore, the sum does not equal the software system defectiveness. The information gathered could be useful in defect prediction.</p><p>In this paper, we present an analysis on the software systems by using Java classes as nodes in the three-node structure and communication between the classes as the edges. We cannot prove that the results would be similar if other software units were used and our results are based solely on the Eclipse software systems. The results of our study show that subgraph defectiveness is not the same across subgraph types and system versions. Furthermore, subgraph defectiveness does not stabilise over the system evolution. Finally, the most important finding is that we could not prove that there is no correlation between subgraph and software system defectiveness. Indeed, for some particular subgraph types, this correlation is statistically significant and very high. This finding is important because it may bring novel ideas and findings into SDP research. Furthermore, it may be used for better fault prevention, aiming to avoid certain subgraph types while designing software architecture and for more effective fault prevention while identifying potentially defective subgraph types in system structure.</p><p>The organisation of this paper is as follows. After this Introduction Section 1, we provide related work in Section 2. We provide details about the definitions and previous studies in Section 3 and basic information about the study and case description in Section 4. In Section 5, we provide a detailed analysis and the results of the study and discuss the findings. The work done in this paper is discussed in Section 6. Threats to validity are discussed in Section 7. We conclude the paper in Section 8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related work</head><p>There are numerous structural abstractions that we may define to analyse complex software systems such as software modules, classes, files, packages, and system units. Mostly, the empirical studies studying the behaviour of complex software systems chose abstractions that are equivalent to the basic building system element of the system they observe. Moreover, using different metrics on these basic analysis units further complicates the ability to generalise empirical observations. Empirical studies on SDP lack generalisability <ref type="bibr" target="#b8">[9]</ref>. Fault distributions across system modules have been investigated by many authors. The first systematic study was conducted by Fenton and Ohlsson <ref type="bibr" target="#b2">[3]</ref>. It was motivated by numerous earlier studies, in particular <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11]</ref>, and a review of earlier studies by Hatton <ref type="bibr" target="#b11">[12]</ref>. All these studies identified the uneven distribution of software faults over the system modules. Furthermore, these studies have been replicated many times and most recently by the authors in <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b4">5]</ref>. All of these studied the empirically observed existence of the Pareto principle of uneven distribution of software faults over the system modules. Studies on the analytic model for fault distributions over the system modules have resulted in less consistent results in terms of the best-fitting particular analytic distribution to the empirical data of faults over the system modules <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b5">6]</ref>.</p><p>One possible effect of fault distributions over the system modules is the communication patterns between them. In some previous studies, it was observed that the most frequently communicating software modules are the most faulty ones <ref type="bibr" target="#b0">[1]</ref>. Furthermore, fewer serious failures are observed in components implementing commonality and fewer changes over time <ref type="bibr" target="#b12">[13]</ref>. These observations motivated us to include studying communication structures as an element that influences system defectiveness. Software structure evolution and its relation to system defectiveness have been proven in <ref type="bibr" target="#b7">[8]</ref>. The frequency of the occurrence of primitive communication substructures called subgraphs is investigated, following a similar approach investigated in other scientific communities for analysing some application domains (medicine, biology, the Internet, traffic, and telecommunications). Here, we extend this study to investigate substructure, as a primitive communication type, and its relation to the substructure and system defectiveness. Furthermore, in <ref type="bibr" target="#b13">[14]</ref>, the authors used dependency graphs to identify central program units that are most likely to face defects. They compared network measures by using the Ucinet tool and complexity measures. A study that was performed on the binaries of a Windows Server 2003 computer identified that network measures are better predictors than classic complexity measures. However, replications of their study in small-scale projects by Turhan and co-workers <ref type="bibr" target="#b14">[15]</ref> have shown that network measures are not suitable predictors. Network measures were also used in some other studies <ref type="bibr" target="#b15">[16]</ref> that report interesting findings in relation to the system structure's ability, when represented as a network graph, to identify and predict structural changes that may be interesting for early fault prediction studies. In the paper by Concas et al. <ref type="bibr" target="#b16">[17]</ref>, the community structure of a complex software network is examined and they show that medium-size systems hold a community structure which appears related to the mean bug number for class.</p><p>One interesting approach using the complex network and representing the software system as a collection of nodes and edges has been used to identify the most critical nodes <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b18">19]</ref>.</p><p>System evolution principles have been stated in Lehman's statements about the evolution of software systems and their interrelations, as obtained by the analysis of large-program growth dynamics <ref type="bibr" target="#b19">[20]</ref>. As the software system grows, declining quality is confirmed in other studies <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b21">22]</ref>. Contradictory evidence is obtained for the statement of increasing complexity, and one probable reason for that is the existence of numerous approaches to structure definition. Each one brings its own perspective on complexity. By evaluating these empirical principles, numerous metrics have been used, and some simple ones are software source code size <ref type="bibr" target="#b22">[23]</ref>, types, global variables, cumulative number of additions and deletions, file changes ( <ref type="bibr" target="#b23">[24]</ref>) etc.</p><p>The persistence of SDP models over the system's evolution has been studied by Zimmermann et al. <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b24">25]</ref>. They found that SDP models may not be so reusable from release to release in software evolution.</p><p>There is a group of studies aiming to identify design patterns and anti-patterns that are related to defects. These approaches aim to find already-known pattern templates in a particular programming language. However, here, we aim to find more generic structural communication patterns or anti-patterns that could guide software modelling and design on a more abstract level, independent of programming language. One similar approach to ours is <ref type="bibr" target="#b25">[26]</ref>. It identifies connected subgraphs with the SGFinder tool. Their work is focused on the characterisation of the specific subgraphs and their relation to defectiveness. Work by Zhang et al. <ref type="bibr" target="#b26">[27]</ref> is closely connected to the topic of this paper. In that work, they use motifs to present the connections inside the software structure and compare them to the number of defects, but they only focus on one specific subgraph type. The findings that they present are promising in terms of using subgraph types in defect prediction. Here, in this paper, we use all the connected subgraphs to represent the whole system and try to understand its evolutionary trends and defectiveness. Moreover, our study involves much larger systems with more releases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Network analysis approach</head><p>In this paper, we will present a software system as a network graph. We define a network graph G as a directed graph represented by a set of vertices V called nodes (in our case, class), and the links that connect some pairs of nodes, which are called edges E (in our case, method calls), represent directed connections between these nodes. The graph is represented with an ordered pair G = (V, E) comprising a set V of vertices together with a set E of edges (i.e. a method call is related with two classes ordered in the direction of that method call).</p><p>In the study, we analyse network subgraphs. Network subgraphs are abstract topological substructures of a network graph. A subgraph, H, of a graph, G, is a graph whose vertices V are a subset of the vertex set present in network graph G and whose edges are a subset of the edge set present in network graph G. In this paper, we restrict our analysis to three-node subgraphs. All possible topologically unique three-node connected and directed subgraphs are presented in Fig. <ref type="figure" target="#fig_0">1</ref>. From the figure, we may observe that some subgraph types have simpler communication interactions than others, and that may also be one property that explains why they may behave differently. Note that some subgraphs involve bidirectional communication, and some involve only unidirectional communication between the nodes. Bidirectional communication may imply some more complicated data dependencies between the classes.</p><p>A network graph may be represented by a 'coordinate system' for such a collection of three-node subgraphs, and that can be used to compare software network subgraphs present in different application domains. Each particular three-node subgraph H i has a frequency of occurrence f i in network graph G. In our previous paper <ref type="bibr" target="#b7">[8]</ref>, we compared software network graphs G of different versions of the Eclipse system with respect to subgraph frequencies represented by such a coordinate system. Here, in this paper, we aim to compare the software network graphs of different versions of the Eclipse system with respect to subgraph defectiveness represented by such a coordinate system. We used code written in Java and in the Eclipse environment as we had developed the tools that work on software systems written in Java and were able to collect information about class defects for the Eclipse project. The approach of three-node subgraphs can theoretically be used on any programming language if the necessary tool is developed.</p><p>Subgraph frequency, f S id , represents the number of subgraph appearances of a particular subgraph type S id in an analysed software network graph. The defectiveness of the ith subgraph, the random variable measuring defectiveness of subgraph type S id , represents a sum of the numbers of faults detected in each node of the ith subgraph and is denoted as d S id . The sum of subgraph defectiveness for all subgraphs i = 1, …, S id of a certain subgraph type S id divided by the subgraph frequency of that subgraph type f S id we call average subgraph defectiveness and denote as d ¯Sid .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Study design</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Hypotheses</head><p>The following hypotheses were analysed.</p><p>Hypotheses about average subgraph defectiveness: RQ1 H1: The average subgraph defectiveness is the same for different subgraph types of the software program. If there are different subgraph types present in the software project, we want to test for the equality of their average defectiveness to see if there is any difference, and if there is, if there are any groups that have a similar average defectiveness. RQ2 H2: The average subgraph defectiveness is the same across different versions of the software program. It is expected that during the process of software testing, the defects will be fixed. If there is no change in some subgraph type's defectiveness through the software evolution, it could point to problems where part of the code is not properly fixed.</p><p>H3: The average subgraph defectiveness is the same between different software programs.</p><p>As both tested projects were part of the Eclipse organisation, they have a similar working environment. Testing for the equality of the subgraph defectiveness between the two projects could show us if working in similar conditions has the same outcome in terms of the average software defectiveness.</p><p>Hypotheses about subgraph defectiveness evolution: RQ3 H4: Subgraph defectiveness does not change over system evolution.</p><p>We test for the equality of the subgraph defectiveness distribution between different subgraph types and between one subgraph type in different versions of the system. If the hypotheses could not be rejected, it could be used in defect predictions.</p><p>H5: The distribution of subgraph defectiveness is the same for different subgraph types within one version of the software program.</p><p>We test for the equality of the subgraph defectiveness distribution between one subgraph type in different versions of the system. If the hypothesis could not be rejected, it could also be used in defect predictions.</p><p>H6: Subgraph defectiveness tends to stabilise during system evolution.</p><p>We wish to see if there is a stabilisation of different subgraph types' defectiveness through software evolution.</p><p>Hypotheses on effects of subgraph defectiveness evolution on system defect proneness: RQ4 H7: Subgraph defectiveness is a good predictor of the number of defects in a system version.</p><p>The hypothesis is tested to see if there is a possibility that information about subgraph types, frequency, and defectiveness could be used as a defect prediction method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Data collection</head><p>The data we analysed came from open-source Eclipse projects written in Java, Java development tools (JDT), and a plug-in development environment (PDE). In JDT, we choose 12 versions, and in PDE, we choose 13. The JDT plug-in was developed in a period of 12 years through 14 different versions, and the PDE plugin, in a period of 11 years through 13 different versions.</p><p>The data collection process was very systematic and involved several months of investigation and tool development needed to produce reliable data sets. Here, we describe the steps in data collection.</p><p>Source code files: Firstly, we collected project files for each project and project versions from the Eclipse Git repository. We removed all the test files from each project file by removing all folders that contain the word test in its name. Only org.eclipse.ui[.*] components for JDT and PDE plug-ins were analysed. Other components were too small for the network analysis.</p><p>Network files: Network graphs of the software communicating structure in a.graph format were created through the rFind tool developed as part of research reported in <ref type="bibr" target="#b27">[28]</ref>. The inputs were project files gathered in the previous step, from which the rFind tool reads all classes and graph nodes and related method calls between classes as directed links.</p><p>Collecting data about defects: The defects of the analysed projects were obtained through the Bugzilla repository. Previously, we developed a BuCo tool <ref type="bibr" target="#b28">[29]</ref> that searches for links between class files and defects and, for each class file, reports details such as the number of lines of code, 52 other static code attributes, and the number of bugs. BuCo tool is a data collection tool that uses a bug-code linking technique based on regular expression. The result of the BuCo tool is a csv file where each row represents one class and measurements, stored in columns, detail static attributes followed by the number of bugs. More details can be found in <ref type="bibr" target="#b28">[29]</ref>.</p><p>Collecting defect data for subgraphs: For the purpose of this analysis, we developed a SuBuCo tool that searches for all subgraph types given in Fig. <ref type="figure" target="#fig_0">1</ref>, identifies classes present in each three-node subgraph, and finally sums up the number of bugs that appears in those classes for a given subgraph. Finally, the obtained data files (one per project version) that we used for our analysis contain subgraph data organised in a table. Rows in Tables <ref type="table" target="#tab_1">1 and 2</ref> represent data measured for every three-node subgraph found in the whole network graph and include information about subgraph id and the total number of faults present in three of its classes. The subgraph types 110 and 238 did not appear in any of the systems and therefore, those types are not presented in the tables nor in the rest of the analysis results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Data analysis techniques</head><p>For the analysis, we use observational conclusions based on the figures and tables and several statistical tests. For the analysis of the subgraph defectiveness tendency, we used descriptive statistics: box and whisker plots for data distributions and medians. For analysing the distribution of defects over subgraph ids in one version and the distribution of defects of each subgraph id over all versions, the Mann-Whitney-Wilcoxon, Kruskal-Wallis, and median tests were used. Additionally, the Jonckheere-Terpstra test <ref type="bibr" target="#b29">[30]</ref> was used to see if the subgraph defectiveness measurements of different ids come from the same population. For the analysis, Statistica software and IBM SPSS Statistic were used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Analysis</head><p>When looking at the types of classes involved in each subgraph type, we came to the conclusion that in the most common subgraph types, 36 and 38, the classes that are involved are usually Java libraries for basic operations and libraries for data types such as String, Array, and others. Views and actions are usually involved in subgraph types 78 and 14, while API classes are present in types 12, 74, and 46. In all subgraph types, there are all types of classes, but these are the most common that appear in each type. That does not mean that those types of classes are the most faulty ones but rather only indicates the type of communication they are involved in. In other words, it means that they are the most used ones by other user classes. The faults could be contained within the other classes that are part of the three-node subgraph and are caused by the improper implementation of interface to those classes implementing basic functionalities. Our analysis involved 25 tables (one per software version, 12 JDT and 13 PDE) each with over a million rows representing all subgraphs found in each software release. Information about the size of each project version in terms of lines of code is given in Table <ref type="table" target="#tab_2">3</ref>. The summary of results involving subgraph frequency f S id , information about the number of subgraphs found per subgraph type S id (all subgraph types are given in Fig. <ref type="figure" target="#fig_0">1</ref>) and for each project version is in Tables <ref type="table" target="#tab_1">1 and 2</ref>. We provide in separate subsections the analysis results for the hypotheses provided in Section 5.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Hypotheses about average subgraph defectiveness</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.1">H1 and H2:</head><p>The rows in Tables <ref type="table" target="#tab_1">1 and 2</ref> present data for different versions of the Eclipse JDT or PDE software. The label of the software version is presented in the first column of the table. Other columns in the table represent subgraphs present in the software network of each software version. The additional information about the descriptive statistics on the subgraph defect appearance in the JDT and PDE software, such as standard deviation, can be found in the additional document at the project website <ref type="bibr">[31]</ref>.</p><p>The average subgraph defectiveness d ¯Sid row represents the ratio of the total sum of subgraph defects for a specific subgraph id and subgraph frequency. For example, in version JDT 2.0, subgraph id 38 has frequency 955, the sum of the defects present in all subgraphs of that type is 4998, and the average subgraph defectiveness of subgraph 38 is then 5.233. As the larger number of defects is to be expected with larger frequencies of a subgraph type, we used the average subgraph defectiveness for this analysis. We can see in Table <ref type="table" target="#tab_0">1</ref> and Fig. <ref type="figure" target="#fig_10">2</ref> that the average subgraph defectiveness d ¯Sid for JDT is decreasing over the system versions. However, during the system evolution over the system versions, there is some fluctuation of average subgraph defectiveness for subgraph types 14, 48, 74, and 78. On the other hand, for the PDE product, we can observe a somewhat different behaviour of the average subgraph defectiveness from Table <ref type="table" target="#tab_1">2</ref> and Fig. <ref type="figure">3</ref>. We can see some increase in the average subgraph defectiveness until version 3.4 and then a decrease. Some larger fluctuations can be observed for subgraphs <ref type="bibr">36, 38, 46, and 74</ref>. From this analysis, we may say that the average subgraph defectiveness d ¯Sid for JDT and PDE products behaves differently during system evolution.</p><p>A Kolmogorov-Smirnov test was performed on distributions of the subgraph defectiveness random variable d S id for each subgraph type and for each software version to see if samples are normally distributed. A normality test performed on the data set has shown that all samples of subgraph defectiveness are not normally distributed. Therefore, we avoided applying statistics for normally distributed data in our further analysis.</p><p>We applied the Mann-Whitney-Wilcoxon test to analyse hypotheses H1 and H2. We compared distributions of average subgraph defectiveness d ¯Sid between subgraph types while testing hypothesis H1 and compared distributions between different versions while testing hypothesis H2. The null hypothesis for the test was that the different average subgraph defectiveness between subgraph types contains samples drawn from the same population. The p-value for the tests was 0.05. In Tables <ref type="table" target="#tab_3">4 and 5</ref>, we present the results of that test. All members of one group have samples drawn from the same population or from the population with similar mean value. In Table <ref type="table">4</ref>, members of the groups are the subgraph types, while in Table <ref type="table" target="#tab_3">5</ref>, those members are the software versions. As we can see in Table <ref type="table">4</ref>, some subgraph types have similar mean values. Despite this finding, there is no visible trend or similarity in those groups. Even though there is some similarity between some types, we cannot say that they all have the same average subgraph defectiveness, and therefore, hypothesis H1 is rejected. Testing H2, which says that the distributions of average subgraph defectiveness d ¯Sid between versions are the same, has given similar results as testing for H1, as shown in Table <ref type="table" target="#tab_3">5</ref>. We can see that subgraph types behave similarly in different versions of the project. In versions 4.2 and 2.0, there is no version for any subgraph type that has the same mean value, except for type 78, where version 4.2 is in a group with few other versions. The average subgraph defectiveness is not the same across all versions of the project, and hypothesis H2 is rejected. Owing to limited space, we did not report the tables for the PDE project, but they can be found at the project website <ref type="bibr">[31]</ref>.</p><p>Our observations while testing for hypotheses 1 and 2 are as follows: • The PDE project is much smaller in terms of the number of classes and subgraphs than the JDT project. • Subgraphs that contain more edges (78, 74, and 46) have a higher average defectiveness in the first considered version of JDT and PDE projects. • In the JDT project, average defectiveness is decreasing with every new release, while in the PDE project, the average subgraph defectiveness seems to be decreasing only in the last few versions but increases again in the last version of the system. • Despite some subgraph types having similar means and despite the fact that they are grouped together, there is no visible trend or similarity in those groups.</p><p>• There is no or very little similarity of mean values between subgraph types in different versions of a project.</p><p>With this analysis, hypotheses H1 and H2 were rejected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Hypotheses about subgraph defectiveness evolution 5.2.1 H3:</head><p>We used the Mann-Whitney-Wilcoxon test for testing H3 -testing that the average subgraph defectiveness d ¯Sid is the same between different software programs. We compared the average mean values for both the projects for every present subgraph for all the releases of the JDT project against all the releases of the PDE project. The p-value was 0.037, &lt;0.05, at The Kruskal-Wallis test is a non-parametric alternative to oneway (between-groups) ANOVA. It is used to compare three or more samples, and it tests the null hypothesis, which states that the different samples in the comparison were drawn from the same distribution or from distributions with the same median. The Kruskal-Wallis test is highly significant (p = 0.000) in the JDT project. Thus, we can conclude that the subgraph defectiveness values of different subgraph types in the same version are significantly different from each other. The test of all versions proves that the subgraph defectiveness of different subgraph types in the same version was significantly different from each other.</p><p>When comparing only subgraphs with a higher defectiveness to test if they are statistically from the same distribution, the results were also negative. Subgraphs with higher defectiveness do not come from the same distribution or from distributions with the same median.</p><p>The median test simply counts the number of cases in each sample that fall above or below the common median and computes the χ 2 value for the resulting 2 × k samples contingency table. Under the null hypothesis (all samples come from populations with identical medians), we expect ∼50% of all cases in each sample to fall above (or below) the common median. The p−value, in the JDT project, of 0.000 indicates that the probability that the χ 2 value occurs if there are actually no differences between the subgraph types in the same version is 0%. Therefore, it can be concluded that there is at least one significant difference between the groups. The median is getting lower with each version as defects are being corrected, and in the last version, only 2% of subgraphs have some defects.</p><p>Just as in the JDT project, in PDE, the Kruskal-Wallis test is also highly significant (p = 0.000) in all versions except in version  In the PDE project, the p−value is 0.000, which indicates that the probability that the χ 2 value occurs, if there are actually no differences between the subgraph types in the same version, is 0%. Therefore, it can be concluded that there is at least one significant difference between the groups.</p><p>Just as in JDT, the median is getting lower with each version as defects are being corrected until the last version. In the last version, 49.5% of subgraphs have some defects, while in the previous version R4_2, only 12.3% had some defects. There were probably some changes in the code, or added code was poorly written. It is also possible that there was an increase in testing effort.</p><p>In version R2_1, as in the Kruskal-Wallis test, the p−value is &gt;0.05, and χ 2 is low. It seems that the medians are equal in the PDE   All subgraph types seem to be unstable through the development of the software. Versions PDE R3_8 and PDE R4_2 are the only versions in which all subgraph types seem to have low to no defectiveness. It is expected for subgraph defectiveness to decrease since with every version, defectiveness is corrected. Subgraph type 14 appears after version R3_2, since it has high defectiveness, but it is also the rarest subgraph type of the eight subgraph types that appear. Subgraph types 46, 78, and 74 also appear but in much smaller numbers, and therefore, it was not possible to analyse them so that the analysis would be significant.</p><p>The Kruskal-Wallis test is highly significant (p = 0.000) for both the PDE and JDT projects. We can conclude that the subgraph defectiveness values of subgraph types in different versions are significantly different from each other both in the JDT project and in the PDE project.</p><p>The p−value in the median tests is 0.0, in both the PDE and JDT projects, which indicates that the probability that the χ 2 value occurs if there are actually no differences in subgraph defectiveness between different versions is 0%.</p><p>Our observations while testing for hypotheses 4 and 5 are as follows:</p><p>• The subgraph defectiveness medians are different between different subgraph types in the same versions for both the JDT and PDE projects. • The subgraph defectiveness medians are very similar in the last few versions of the JDT project as they are all getting closer to 0.</p><p>• The subgraph defectiveness values of each type, in both the JDT and PDE projects, are not the same as the software evolves.</p><p>With the testing process, subgraph defectiveness changes in each version.</p><p>With this analysis, we have shown that subgraph defectiveness changes over system evolution and that hypotheses H4 and H5 are rejected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.3">H6:</head><p>The Jonckheere-Terpstra test is a test for an ordered alternative hypothesis within independent samples. It is similar to the Kruskal-Wallis test. The hypothesis is that independent samples are from the same population. However, with the Kruskal-Wallis test, there is no a priori ordering of the populations from which the samples are drawn. Therefore, the Jonckheere test has more statistical power than the Kruskal-Wallis test. The test has the null hypothesis that the distribution of subgraphs is the same across different software versions. The statistical significance value of the Jonckheere-Terpstra test was 0. As p &lt; 0.05, the null hypothesis can be rejected, which means that there is a difference in subgraph defectiveness over versions. With that finding, an alternative hypothesis is accepted, meaning that subgraph defectiveness is decreasing with software evolution. Null hypothesis H6 was rejected, and therefore, the alternative hypothesis, which states that subgraph defectiveness is changing as software evolves, was accepted for all subgraph types. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Hypotheses about effects of subgraph defectiveness evolution on system defect proneness</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.1">H7:</head><p>A Spearman correlation coefficient between average defectiveness and total defectiveness by subgraph type is presented in Table <ref type="table" target="#tab_4">6</ref> for the JDT project and in Table <ref type="table" target="#tab_5">7</ref> for the PDE project. We can observe that not all types have a p−value &lt; 0.05, which means that we can reject the idea that the correlation is due to random sampling for types 6, 12, 36, 38, and 78, but have no compelling evidence that the correlation is real and not due to chance for types 14, 46, and 74. Since there are much fewer cases where types 14, 46, and 74 are present, it is to be expected that they have much less influence on total defectiveness. For types 6, 12, 36, and 38, the correlation value (S value) is higher than for the rest, indicating that there is a very strong positive relation between those types of defectiveness and total defectiveness, for the type 74 relation is strong or moderate and weak for types 14 and 46. These tests have shown that the average number of defectiveness has a     correlation with the total number of defects in versions, which means that H7 cannot be rejected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Discussion</head><p>As SDP is a growing field of research, our aim in this paper was to explore the usage of software structure in terms of network graphs as a possible direction in that research. In our research, we used network subgraphs and information about defects in every defined subgraph in the projects that we used for the analysis.</p><p>At the beginning of the research, we defined four research questions in Section 1 that we wished to answer in this paper.</p><p>6.1 RQ1 -Which subgraphs with three nodes are the most defective in a software system?</p><p>The first question we investigated was whether there is a subgraph type that is the most defective in the software system. We looked at the average defectiveness in all the subgraph types. Hypothesis H1 was used to help us answer this question. We tested the hypothesis by comparing the average defectiveness of the subgraph types. The subgraph types with fewer connections (edges) were more common than the types with multiple connections. Those simple types of subgraphs most often have connections as library calls, using interfaces and communications where one node calls two nodes that are not mutually connected. Despite the fact that those subgraph types were the most common, they did not have the highest average defectiveness. The types that are rarer have significantly higher average defectiveness as the software system starts evolving. At the beginning of the software, in the first few versions, average defectiveness is truly higher in the subgraph types with larger numbers of connections. As the system evolves, average defectiveness equalises through all subgraph types. Our answer to the question of whether there is a subgraph type that is more defective than the others is yes, types with more connections, such as types 78, 46, and 14, but only as the software system starts evolving. As the testing process becomes more intense and the system starts to grow, there does not seem to be a considerable difference between the types. With this finding, it is possible to alert the programmer as the complex communication patterns based on subgraph types are being formed inside his code. The second question investigated concerned the differences between subgraph type average defectiveness across different versions; in other words, we investigated if the average subgraph defectiveness is similar across different systems and in different versions of the same evolving system. We defined hypotheses H2 and H3 in order to see how the given data sets behave in the context of this research question. We used the average number of defects present in all occurrences of each subgraph type in all versions. For comparison, we used the average number of defects of one type in all versions. Analysis was run using different sets of statistical test. It was run on all subgraph types appearing in the system versions. The results were that there is a difference in the average defectiveness of a subgraph type as the system evolves, which is to be expected. As the new versions of the system are launched, defects are being corrected as the testing process goes on. There are some versions in which the number of defects grows for every subgraph type, such as in the PDE versions from 3_3 to 3_6. The reason for this could be adding code that is very faulty or simply that the testing effort has been greatly enhanced. Our hypothesis H2 stating that the average defectiveness is the same across different versions of the software program was rejected and the hypothesis H3 that states that the average subgraph defectiveness is the same between different software programs could not be rejected for the given data set. We concluded that in this software system, the average subgraph defectiveness is not similar across the different software systems and in the different software versions of the same evolving software system, but we cannot say that it is not the same when looking at the subgraph defectiveness between two different systems that come from the same Eclipse environment.   6.3 RQ3 -How does the subgraph defectiveness evolve over the software versions, and does it stabilise as the software system evolves?</p><p>For every system, it is conventional that as the system evolves, its size also grows. In terms of software, that size is the size of the software code. Gathering information about the size of the code and the number of defects for every part of the code helped us to answer the question about subgraph defectiveness evolution and its stabilisation through the hypotheses H4, H5, and H6. When analysing the hypotheses H4 and H5, we tested to see if the defectiveness is the same across the system evolution, both between different versions and between subgraph types in the same version. The defectiveness was not the same in both cases, and we concluded that the defectiveness changes for each subgraph type as the system evolves. In both the PDE and JDT projects, it seems that in releasing version 4_2, the only differences from version 3_8 were in the number of defects. It seems that between those versions, there was no new code added, and only the testing process was performed. In the analysed system, we cannot conclude that there is a strict direction in which the subgraph defectiveness evolves. In the JDT project, subgraph defectiveness generally tends to decrease with the system evolution, but in the PDE project, there are versions in which it decreases and grows unexpectedly, but the direction of those changes is the same for all the subgraph types. Owing to those unpredictable changes, we cannot say that the subgraph defectiveness stabilises during the system evolution in this study. Hypothesis H6 stating that the subgraph defectiveness tends to stabilise during system evolution was rejected and the alternative hypothesis which states that subgraph defectiveness is changing as the software evolves was accepted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">RQ4 -Is there a relation between the average subgraph defectiveness and the software system defectiveness?</head><p>The last question we analysed through hypothesis H7 was if there is any relation between average subgraph defectiveness and system defectiveness. The results for this hypothesis and possible conclusions based on those results are unclear. There is a strong relation between the average subgraph defectiveness of some subgraph types, but those subgraph types are present in the system in quite larger numbers than the other types. There are some implications that analysing the system using subgraph types could be beneficial for defect prediction. Further research in that direction could be favourable for SDP but at the moment, we can hardly reach definitive conclusions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Threats to validity</head><p>Threats to internal validity are present when causal relations are examined. The study was conducted by looking at the relationship of the defects and code structures. Factors, such as the developing team, testing team, and organisation structure, were not taken into consideration. In the process of building subgraphs, communication between classes, such as inheritance and composition, was not taken into account because of the tool's limitations. It is possible that when including those types of relationships, the results could vary. Threats to external validity are conditions that limit the ability to generalise the results. The data we tested were from an opensource project, Eclipse, written in Java. Such data cannot be generalised to industry projects or to software written in other programming languages, as we do not have any proof that our conclusions could be applicable outside of the Eclipse environment. In this study, only two subsets of the Eclipse project were tested. Only complex parts of systems are taken into account, since there are parts that are simply too small for subgraph analysis. Selecting only the more complex parts could represent bias. Furthermore, in this paper, we used the classes as nodes and we cannot claim that the results will be the same if other units were used. The greatest difference between the two data sets used in this study is their size. The difference in size can be seen in Tables <ref type="table" target="#tab_1">1  and 2</ref>. Despite those differences, the results obtained were similar in both projects. However, this is still too small sample to be able to give generalised conclusions.</p><p>In this study, we used structural measures that are independent of static code properties and therefore are more general than the classical code metrics used in various studies. The three-node subgraphs, the structural measure that we used in this paper, have been investigated on 234 open-source Git repositories and the results presented in <ref type="bibr" target="#b27">[28]</ref> show similar and independent behaviour. In papers <ref type="bibr" target="#b30">[32,</ref><ref type="bibr" target="#b31">33]</ref>, the data sets from Java Qualitas Corpus <ref type="bibr" target="#b32">[34]</ref> are used for investigating the network metrics and the directed graphs as structural metric. Both papers came to the same conclusion. Those measures are independent from the specific software system and are general properties of the Java software systems. The comparison between Java and Erlang software systems by using structural metrics has been conducted in <ref type="bibr" target="#b33">[35]</ref>. The analysis in the paper shows that the behaviour between systems, in terms of the three-node subgraphs, written in Erlang and Java is similar. Thus, all this findings encourage the use of structural metrics and its ability to generalise the conclusions. However, in this paper, we further investigate its relation to defects and we cannot claim that the conclusions obtained on limited data sets used in this study can be generalised before replicating the study to other software projects and contexts.</p><p>In order to run an analysis similar to this, the data set has to contain information that is quite hard to obtain from software industry because data set combines information from source code and defect detection process. The whole source code has to be available as well as information about the defects and its relation to the source code. For each defect, we have to have a place in the code where the defect was introduced. In other words, we need the name of the class in which the defect was found and therefore, the Java Qualitas Corpus <ref type="bibr" target="#b32">[34]</ref> could not be used. For that reason, only Eclipse projects were used, as we did not have other appropriate data sets that were written in Java, since in this study, we focused solely on Java software. For extracting the necessary information, the rFind for structural metrics and BuCo tool for class-defect relation was used. Since the class-defect relation is not collected during the development process and is not available from the repositories, this relation we obtained from data mining process implemented in BuCo tool. A detailed analysis of the tool performance can be found in <ref type="bibr" target="#b28">[29]</ref>. The results of the study show that the tool is highly effective. The results also show that when compared with other more complex techniques, such as the approach used by Relink <ref type="bibr" target="#b34">[36]</ref>, the BuCo tool is more efficient. The recall of the tool, when tested on Eclipse JDT R2_0, is 99.58%. The precision is 99.89%, and the F-score is 99.74%, both of which are higher results than for Relink.</p><p>Making the data set used publicly available is a tremendous problem, since the data set contains 32 GB of information, including details in addition to those described within this study, but it is available upon request.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusions and future work</head><p>The application of network analysis approaches to software and other areas of science is still a widely open area of research. Here, we applied structural analysis based on subgraph types that are representing primitive three-node communication patterns within the graph structure. Analysing the evolution of software by representing the software system using the frequencies of subgraph types is beneficial because it allows for structural analysis involving communication patterns. Fault distributions over the software structure have been widely analysed in many studies, but these studies only weakly study the effects of communication structures within fault distribution analysis.</p><p>In this paper, we have shown that Eclipse software programs have similar behaviours in terms of average subgraph type defectiveness and distributions of average subgraph frequencies coming from the same population. However, in each software program, the defectiveness of different subgraph typesrepresenting different communication patterns -behave differently, and we cannot find evidence that they come from the same population. This leads us to conclude that communication interactions formalised within subgraph types indeed have an influence on system defectiveness.</p><p>The group of hypotheses related to the distributions of subgraph defectiveness and their evolution have shown that subgraph defectiveness changes over system evolution and that subgraph defectiveness does not tend to stabilise during system evolution. Although subgraph frequencies grow during the system evolution and do not stabilise, we can observe a contrary effect that the subgraph defectiveness is decreasing as the system matures. This approach to software analysis with the help of subgraph structures offers a liveness property that other metrics, such as static code attributes and software process metrics, may not be able to offer.</p><p>We found that subgraph defectiveness has a strong correlation with the number of defects in a system version. New insights obtained with this approach may be useful in better fault prevention by providing software architects with new architecture design guidelines or by providing software quality personnel with a set of risky subgraphs so that they may better plan verification and thus be more effective in defect detection activities.</p><p>In our future work, we aim to investigate how different subgraphs influence other metrics of software. Additionally, analysing software written in other languages could be interesting. We can also see if software evolution, in terms of subgraphs, in other languages tends to evolve in the same way and if the same subgraphs are also present.</p><p>Even though it seems that the network measures are general for the software systems, we do not know if the defects behaviour in terms of subgraph can be generalised. This question has to be further investigated. Further research can be beneficial for the SDP.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1</head><label>1</label><figDesc>Fig. 1 Types of three-node subgraphs</figDesc><graphic coords="2,51.61,49.30,237.60,82.20" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 Fig. 3</head><label>23</label><figDesc>Fig. 2 Average subgraph defectiveness d ¯Sid over versions in JDT</figDesc><graphic coords="7,71.77,304.79,197.28,125.28" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>2 . 1</head><label>21</label><figDesc>version in subgraph types. The box plots in Figs. 8-10 describe the central tendency of the subgraph defectiveness of each version in the JDT project. As we can see from the figures, the subgraph defectiveness median is getting lower with the software version except for subgraph types 46, 74, and 78, for which it varies over versions and stabilises in version JDT R3_5. Subgraph types 46 and 78 are rare and are irrelevant in comparison to other types. It is expected that subgraph defectiveness will decrease since with every version, defectiveness is corrected. In version JDT 3.0, new defects were added in all subgraph types, while in version JDT R3_2, new defects were added in subgraphs 14, 74, and 78. After version JDT R3_4, no more defects seem to be added to the subgraphs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 2 Fig. 5</head><label>425</label><figDesc>Fig. 4 Box plots for subgraph defectiveness. Each figure represents one Eclipse JDT version and each subfigure presents box plots for all subgraphs (a) JDT version R2.1, (b) JDT version R3.2</figDesc><graphic coords="8,50.35,184.34,228.12,366.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 2 Fig. 7</head><label>627</label><figDesc>Fig. 6 Box plots for subgraph defectiveness. Each figure represents one Eclipse PDE version and each subfigure presents box plots for all subgraphs (a) PDE version R2.1, (b) PDE version R3.2</figDesc><graphic coords="9,55.57,49.30,229.68,366.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 8</head><label>8</label><figDesc>Fig. 8 Box plots for JDT subgraph ids (a) Subgraph ID 38, (b) Subgraph ID 36</figDesc><graphic coords="10,84.13,49.30,172.56,279.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 9</head><label>9</label><figDesc>Fig. 9 Box plots for JDT subgraph ids</figDesc><graphic coords="10,84.25,366.24,172.32,281.28" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>( a )Fig. 10</head><label>a10</label><figDesc>Fig. 10 Box plots for JDT subgraph ids (a) Subgraph ID 12, (b) Subgraph ID 14</figDesc><graphic coords="10,350.71,49.30,172.32,282.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 11</head><label>11</label><figDesc>Fig. 11 Box plots for PDE subgraph ids</figDesc><graphic coords="10,350.17,368.28,173.40,282.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>( a )</head><label>a</label><figDesc>Subgraph ID 38, (b) Subgraph ID 36</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>6. 2</head><label>2</label><figDesc>RQ2 -Is the average subgraph defectiveness similar across the different software systems and in the different software versions of the same evolving software system?</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 12</head><label>12</label><figDesc>Fig. 12 Box plots for PDE subgraph ids (a) Subgraph ID 6, (b) Subgraph ID 12, (c) Subgraph ID 14</figDesc><graphic coords="11,84.67,49.30,171.48,428.76" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1</head><label>1</label><figDesc>Data set in the analysis presenting subgraph frequencies f S id , average subgraph defectiveness d ¯Sid , and Standard Deviation for the JDT project</figDesc><table><row><cell>Version</cell><cell>Info</cell><cell>6</cell><cell>12</cell><cell>14</cell><cell>36</cell><cell>38</cell><cell>46</cell><cell>74</cell><cell>78</cell><cell>102 108</cell><cell>Defects</cell></row><row><cell>JDT 2_0</cell><cell>f S id</cell><cell>27,419</cell><cell>3825</cell><cell>346</cell><cell>175,621</cell><cell>955</cell><cell>18</cell><cell>268</cell><cell>28</cell><cell>0</cell><cell>965,114</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>6.599</cell><cell>7.718</cell><cell>16.442</cell><cell>4.207</cell><cell>5.233</cell><cell>16.278</cell><cell>15.933</cell><cell>21.107</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>8.24</cell><cell>10.04</cell><cell>12.49</cell><cell>6.25</cell><cell>7.44</cell><cell>14.03</cell><cell>13.73</cell><cell>11.82</cell><cell>0</cell><cell></cell></row><row><cell>JDT 2_1</cell><cell>f S id</cell><cell>42,739</cell><cell>7097</cell><cell>658</cell><cell>312,163</cell><cell>1527</cell><cell>20</cell><cell>397</cell><cell>43</cell><cell>0</cell><cell>927,892</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>2.963</cell><cell>3.573</cell><cell>1.801</cell><cell>2.476</cell><cell>2.696</cell><cell>2.85</cell><cell>3.479</cell><cell>0.954</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>4.23</cell><cell>4.53</cell><cell>4.21</cell><cell>3.47</cell><cell>3.79</cell><cell>4.97</cell><cell>5.54</cell><cell>2.49</cell><cell>0</cell><cell></cell></row><row><cell>JDT 3_0</cell><cell>f S id</cell><cell>66,509</cell><cell>11,025</cell><cell>912</cell><cell>575,120</cell><cell>2188</cell><cell>24</cell><cell>483</cell><cell>43</cell><cell>2</cell><cell>1,907,898</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>3.569</cell><cell>6.003</cell><cell>3.59</cell><cell>2.766</cell><cell>3.2556</cell><cell>7.125</cell><cell>6.073</cell><cell>1.558</cell><cell>2.5</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>4.71</cell><cell>8.87</cell><cell>8.28</cell><cell>3.84</cell><cell>5.39</cell><cell>11.21</cell><cell>10.01</cell><cell>4.38</cell><cell>0.5</cell><cell></cell></row><row><cell>JDT 3_1</cell><cell>f S id</cell><cell>79,670</cell><cell>11,038</cell><cell>875</cell><cell>714,762</cell><cell>2563</cell><cell>26</cell><cell>546</cell><cell>45</cell><cell>1</cell><cell>1,736,144</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>2.136</cell><cell>2.891</cell><cell>1.766</cell><cell>2.133</cell><cell>2.567</cell><cell>3.538</cell><cell>2.658</cell><cell>1.667</cell><cell>2</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>3.02</cell><cell>3.53</cell><cell>2.62</cell><cell>2.96</cell><cell>3.72</cell><cell>2.94</cell><cell>3.19</cell><cell>2.65</cell><cell>0</cell><cell></cell></row><row><cell>JDT 3_2</cell><cell>f S id</cell><cell>93,771</cell><cell>13,550</cell><cell>887</cell><cell>988,131</cell><cell>3121</cell><cell>31</cell><cell>610</cell><cell>40</cell><cell>3</cell><cell>2,074,675</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>1.746</cell><cell>1.983</cell><cell>2.249</cell><cell>1.896</cell><cell>2.233</cell><cell>4</cell><cell>2.626</cell><cell>2.475</cell><cell>5.333</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>2.74</cell><cell>2.76</cell><cell>2.73</cell><cell>2.80</cell><cell>3.15</cell><cell>2.86</cell><cell>2.83</cell><cell>2.91</cell><cell>0.7</cell><cell></cell></row><row><cell>JDT 3_3</cell><cell>f S id</cell><cell>100,921</cell><cell>15,454</cell><cell>923</cell><cell>1,052,913</cell><cell>3492</cell><cell>34</cell><cell>901</cell><cell>54</cell><cell>2</cell><cell>1,431,157</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>1.102</cell><cell>1.369</cell><cell>1.026</cell><cell>1.227</cell><cell>1.52</cell><cell>1.294</cell><cell>1.009</cell><cell>0.667</cell><cell>2.5</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>2.10</cell><cell>2.54</cell><cell>1.66</cell><cell>1.92</cell><cell>2.74</cell><cell>1.78</cell><cell>1.26</cell><cell>1.18</cell><cell>0.5</cell><cell></cell></row><row><cell>JDT 3_4</cell><cell>f S id</cell><cell>112,266</cell><cell>18,270</cell><cell>1027</cell><cell>1,193,467</cell><cell>4364</cell><cell>51</cell><cell>993</cell><cell>58</cell><cell>2</cell><cell>1,160,511</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.872</cell><cell>0.779</cell><cell>1.142</cell><cell>0.874</cell><cell>0.843</cell><cell>1.941</cell><cell>0.752</cell><cell>1.052</cell><cell>2.5</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.97</cell><cell>1.42</cell><cell>1.54</cell><cell>1.70</cell><cell>1.55</cell><cell>1.88</cell><cell>1.25</cell><cell>1.44</cell><cell>0.5</cell><cell></cell></row><row><cell>JDT 3_5</cell><cell>f S id</cell><cell>126,144</cell><cell>18,483</cell><cell>947</cell><cell>1,297,590</cell><cell>4379</cell><cell>45</cell><cell>931</cell><cell>45</cell><cell>2</cell><cell>739,885</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.477</cell><cell>0.376</cell><cell>0.227</cell><cell>0.517</cell><cell>0.59</cell><cell>0.644</cell><cell>0.245</cell><cell>0.4</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.16</cell><cell>1.08</cell><cell>0.67</cell><cell>1.19</cell><cell>1.35</cell><cell>1.00</cell><cell>0.70</cell><cell>1.07</cell><cell>0</cell><cell></cell></row><row><cell>JDT 3_6</cell><cell>f S id</cell><cell>126,144</cell><cell>18,862</cell><cell>945</cell><cell>1,333,151</cell><cell>4545</cell><cell>45</cell><cell>949</cell><cell>45</cell><cell>2</cell><cell>511,972</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.311</cell><cell>0.349</cell><cell>0.227</cell><cell>0.348</cell><cell>0.404</cell><cell>0.356</cell><cell>0.26</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>0.75</cell><cell>0.75</cell><cell>0.80</cell><cell>0.79</cell><cell>0.85</cell><cell>1.15</cell><cell>0.55</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>JDT 3_7</cell><cell>f S id</cell><cell>127,006</cell><cell>18,290</cell><cell>949</cell><cell>10,735,562</cell><cell>4384</cell><cell>44</cell><cell>949</cell><cell>45</cell><cell>2</cell><cell>400,263</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.338</cell><cell>0.302</cell><cell>0.178</cell><cell>0.033</cell><cell>0.387</cell><cell>0.25</cell><cell>0.341</cell><cell>0.133</cell><cell>1.5</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.01</cell><cell>0.97</cell><cell>0.73</cell><cell>0.85</cell><cell>1.22</cell><cell>0.61</cell><cell>0.59</cell><cell>0.50</cell><cell>0.5</cell><cell></cell></row><row><cell>JDT 3_8</cell><cell>f S id</cell><cell>132,736</cell><cell>18,535</cell><cell>951</cell><cell>1,349,285</cell><cell>4469</cell><cell>44</cell><cell>952</cell><cell>45</cell><cell>3</cell><cell>249,348</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.2716</cell><cell>0.066</cell><cell>0.013</cell><cell>0.156</cell><cell>0.21</cell><cell>0.25</cell><cell>0.123</cell><cell>0.044</cell><cell>0.333</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>0.63</cell><cell>0.44</cell><cell>0.38</cell><cell>0.57</cell><cell>0.65</cell><cell>0.53</cell><cell>0.30</cell><cell>0.20</cell><cell>0.9</cell><cell></cell></row><row><cell>JDT 4_2</cell><cell>f S id</cell><cell>132,736</cell><cell>18,535</cell><cell>951</cell><cell>1,349,284</cell><cell>4469</cell><cell>44</cell><cell>952</cell><cell>45</cell><cell>3</cell><cell>25,629</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.019</cell><cell>0.015</cell><cell>0</cell><cell>0.017</cell><cell>0.033</cell><cell>0</cell><cell>0.014</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>0.13</cell><cell>0.11</cell><cell>0</cell><cell>0.12</cell><cell>0.17</cell><cell>0</cell><cell>0.11</cell><cell>0</cell><cell>0</cell><cell></cell></row></table><note>IET Softw., 2019, Vol. 13 Iss. 5, pp. 355-367 © The Institution of Engineering and Technology 2018</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2</head><label>2</label><figDesc>Data set in the analysis presenting subgraph frequencies f S id , average subgraph defectiveness d ¯Sid , and standard The box plots in Figs.4 and5 describe the central tendency of the subgraph defectiveness d S id in the JDT project in terms of the median of the values (represented by the smallest box in the plot). The spread (variability) in the variable values is represented in this plot by the quartiles (the 25 and 75 percentiles, larger box in the plot) and the minimum and maximum values of the variable. As we can see from the figures, subgraphs' defectiveness medians are different for each subgraph type in software versions in earlier releases, although subgraph types 36, 38, 6, and 12, which are the most common since they are very simple, are close to each other in the beginning until version JDT R3_2, while other subgraph types' medians are much higher. In version JDT 3.6, all subgraph types are stabilised and have mostly no defects. Figs. 6 and 7 describe subgraph defectiveness in the PDE project. In the PDE project, there are fewer subgraph types; all but 36, 38, 6, 14, and 12 are too rare to have a meaningful analysis. In the first version, subgraph type 12 seems to have the most subgraph defects and that continues in the first four versions, until version PDE 3.2. In version PDE 3.5, subgraph type 14 has a rise in defects compared to other types, and after that, the defect number decreases again. In the last version, it seems that all the defectiveness of subgraph types increased, and the most stable versions were PDE R3_8 and PDE R4_2.</figDesc><table><row><cell cols="3">deviation for the PDE project</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Version</cell><cell>Info</cell><cell>6</cell><cell>12</cell><cell>14</cell><cell>36</cell><cell>38</cell><cell>46</cell><cell>74</cell><cell cols="2">78 102 108</cell><cell>Defects</cell></row><row><cell>PDE 2_0</cell><cell>f S id</cell><cell>3617</cell><cell>86</cell><cell>0</cell><cell>63,252</cell><cell>31</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>87,797</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>1.469</cell><cell>2.302</cell><cell>0</cell><cell>1.3</cell><cell>1.193</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>2.61</cell><cell>2.86</cell><cell>0</cell><cell>2.11</cell><cell>1.51</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 2_1</cell><cell>f S id</cell><cell>5178</cell><cell>179</cell><cell>0</cell><cell>108,516</cell><cell>48</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>104,125</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.952</cell><cell>0.972</cell><cell>0</cell><cell>0.912</cell><cell>0.708</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.81</cell><cell>1.64</cell><cell>0</cell><cell>1.78</cell><cell>1.12</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 3_0</cell><cell>f S id</cell><cell>5532</cell><cell>138</cell><cell>0</cell><cell>124,298</cell><cell>25</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>179,707</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>1.039</cell><cell>0.935</cell><cell>0</cell><cell>1.398</cell><cell>1.24</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.47</cell><cell>1.49</cell><cell>0</cell><cell>1.66</cell><cell>1.58</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 3_1</cell><cell>f S id</cell><cell>14,799</cell><cell>727</cell><cell>0</cell><cell>185,422</cell><cell>263</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>331,361</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>1.626</cell><cell>2.528</cell><cell>0</cell><cell>1.644</cell><cell>2.6</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.99</cell><cell>2.43</cell><cell>0</cell><cell>1.95</cell><cell>2.39</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 3_2</cell><cell>f S id</cell><cell>32,149</cell><cell>3024</cell><cell>56</cell><cell>354,217</cell><cell>852</cell><cell>13</cell><cell>48</cell><cell>0</cell><cell>0</cell><cell>777,763</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>1.772</cell><cell>2.075</cell><cell>1.25</cell><cell>2.011</cell><cell>2.587</cell><cell>1.615</cell><cell>0.771</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.94</cell><cell>2.15</cell><cell>1.28</cell><cell>2.08</cell><cell>2.15</cell><cell>1.38</cell><cell>1.01</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 3_3</cell><cell>f S id</cell><cell>39,654</cell><cell>4566</cell><cell>58</cell><cell>529,612</cell><cell>1177</cell><cell>10</cell><cell>51</cell><cell>0</cell><cell>2</cell><cell>1,743,146</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>2.819</cell><cell>3.677</cell><cell>1.483</cell><cell>3.039</cell><cell>4.304</cell><cell>1.9</cell><cell>0.824</cell><cell>0</cell><cell>1.5</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>3.66</cell><cell>4.08</cell><cell>2.66</cell><cell>3.54</cell><cell>3.08</cell><cell>2.84</cell><cell>1.27</cell><cell>0</cell><cell>0.5</cell><cell></cell></row><row><cell>PDE 3_4</cell><cell>f S id</cell><cell>31,026</cell><cell>3182</cell><cell>35</cell><cell>803,161</cell><cell>809</cell><cell>4</cell><cell>7</cell><cell>0</cell><cell>0</cell><cell>2,204,252</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>3.57</cell><cell>2.419</cell><cell>5.543</cell><cell>2.594</cell><cell>3.038</cell><cell>6.5</cell><cell>5.714</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>8.25</cell><cell>6.62</cell><cell>0.95</cell><cell>6.27</cell><cell>8.90</cell><cell>1</cell><cell>0.95</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 3_5</cell><cell>f S id</cell><cell>33,318</cell><cell>3564</cell><cell>46</cell><cell>920,810</cell><cell>942</cell><cell>2</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>2,294,674</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>2.669</cell><cell>2.337</cell><cell>10.348</cell><cell>2.383</cell><cell>3.014</cell><cell>2</cell><cell>0</cell><cell>14</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>4.55</cell><cell>5.10</cell><cell>3.72</cell><cell>3.95</cell><cell>6.22</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 3_6</cell><cell>f S id</cell><cell>34,997</cell><cell>3631</cell><cell>57</cell><cell>1,009,765</cell><cell>988</cell><cell>3</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>1,052,128</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>1.061</cell><cell>0.927</cell><cell>0.298</cell><cell>1</cell><cell>1.44</cell><cell>1</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>2.53</cell><cell>1.35</cell><cell>0.42</cell><cell>1.30</cell><cell>1.55</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 3_7</cell><cell>f S id</cell><cell>35,943</cell><cell>3706</cell><cell>57</cell><cell>1,038,078</cell><cell>1022</cell><cell>3</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>1,156,743</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.866</cell><cell>0.975</cell><cell>0.228</cell><cell>1.08</cell><cell>1.036</cell><cell>1</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.28</cell><cell>1.35</cell><cell>0.42</cell><cell>1.30</cell><cell>1.55</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 3_8</cell><cell>f S id</cell><cell>36,763</cell><cell>3679</cell><cell>57</cell><cell>1,063,298</cell><cell>1018</cell><cell>3</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>98,483</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.101</cell><cell>0.081</cell><cell>0</cell><cell>0.089</cell><cell>0.099</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>0.36</cell><cell>0.35</cell><cell>0</cell><cell>0.35</cell><cell>0.36</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 4_2</cell><cell>f S id</cell><cell>36,763</cell><cell>3679</cell><cell>57</cell><cell>1,063,298</cell><cell>1018</cell><cell>3</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>158,371</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.16</cell><cell>0.187</cell><cell>0</cell><cell>0.143</cell><cell>0.246</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>0.44</cell><cell>0.51</cell><cell>0</cell><cell>0.43</cell><cell>0.55</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell>PDE 4_3</cell><cell>f S id</cell><cell>36,556</cell><cell>3671</cell><cell>81</cell><cell>1,064,393</cell><cell>1042</cell><cell>1</cell><cell>11</cell><cell>0</cell><cell>0</cell><cell>896,536</cell></row><row><cell></cell><cell>d ¯Sid</cell><cell>0.704</cell><cell>0.925</cell><cell>1.852</cell><cell>0.814</cell><cell>0.966</cell><cell>1</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row><row><cell></cell><cell>σ S id</cell><cell>1.04</cell><cell>1.05</cell><cell>2.2</cell><cell>1.03</cell><cell>1.18</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3</head><label>3</label><figDesc>Lines of code for each project version in both the</figDesc><table><row><cell cols="2">JDT and PDE projects</cell><cell></cell><cell></cell></row><row><cell>JDT</cell><cell></cell><cell>PDE</cell><cell></cell></row><row><cell>Version</cell><cell>LOC</cell><cell>Version</cell><cell>LOC</cell></row><row><cell>R2_0</cell><cell>136,405</cell><cell>R2_0</cell><cell>52,716</cell></row><row><cell>R2_1</cell><cell>215,150</cell><cell>R2_1</cell><cell>74,855</cell></row><row><cell>R3_0</cell><cell>307,699</cell><cell>R3_0</cell><cell>83,865</cell></row><row><cell>R3_1</cell><cell>396,635</cell><cell>R3_1</cell><cell>107,700</cell></row><row><cell>R3_2</cell><cell>482,249</cell><cell>R3_2</cell><cell>143,221</cell></row><row><cell>R3_3</cell><cell>517,613</cell><cell>R3_3</cell><cell>177,781</cell></row><row><cell>R3_4</cell><cell>540,357</cell><cell>R3_4</cell><cell>237,670</cell></row><row><cell>R3_5</cell><cell>557,419</cell><cell>R3_5</cell><cell>293,180</cell></row><row><cell>R3_6</cell><cell>568,147</cell><cell>R3_6</cell><cell>316,383</cell></row><row><cell>R3_7</cell><cell>585,968</cell><cell>R3_7</cell><cell>334,962</cell></row><row><cell>R3_8</cell><cell>599,865</cell><cell>R3_8</cell><cell>330,582</cell></row><row><cell>R4_2</cell><cell>599,865</cell><cell>R4_2</cell><cell>330,592</cell></row><row><cell>-</cell><cell>-</cell><cell>R4_3</cell><cell>333,390</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 5 Mann-Whitney-Wilcoxon test</head><label>5</label><figDesc></figDesc><table><row><cell></cell><cell></cell><cell></cell><cell cols="4">for JDT project subgraph types</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">JDT Group 1</cell><cell>Group 2</cell><cell>Group 3</cell><cell cols="9">Group 4 Group 5 Group 6 Group 7 Group 8 Group 9 Group 10 Group 11 Group 12</cell></row><row><cell>6</cell><cell>4.2</cell><cell>3.8</cell><cell>3.6</cell><cell>3.7</cell><cell>3.5</cell><cell>3.4</cell><cell>3.3</cell><cell>3.2</cell><cell>3.1</cell><cell>2.1</cell><cell>3.0</cell><cell>2.0</cell></row><row><cell>12</cell><cell>4.2</cell><cell>3.8</cell><cell>3.6</cell><cell>3.7</cell><cell>3.5</cell><cell>3.4</cell><cell>3.3</cell><cell>3.2</cell><cell>3.1</cell><cell>2.1</cell><cell>3.0</cell><cell>2.0</cell></row><row><cell>14</cell><cell>4.2</cell><cell>3.8</cell><cell>3.6 3.5</cell><cell>3.7</cell><cell cols="2">3.3 3.4 3.1 2.1</cell><cell>3.2</cell><cell>3.0</cell><cell>2.0</cell><cell>-</cell><cell>-</cell><cell>-</cell></row><row><cell>36</cell><cell>4.2</cell><cell>3.8</cell><cell>3.6</cell><cell>3.7</cell><cell>3.5</cell><cell>3.4</cell><cell>3.3</cell><cell>3.2</cell><cell>3.1</cell><cell>2.1</cell><cell>3.0</cell><cell>2.0</cell></row><row><cell>38</cell><cell>4.2</cell><cell>3.8</cell><cell>3.6 3.7</cell><cell>3.5</cell><cell>3.4</cell><cell>3.3</cell><cell>3.2</cell><cell>3.1 2.1</cell><cell>3.0</cell><cell>2.0</cell><cell>-</cell><cell>-</cell></row><row><cell>46</cell><cell>4.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 6 Spearman</head><label>6</label><figDesc>coefficient on the JDT project</figDesc><table><row><cell>Subgraph id</cell><cell>s−value</cell><cell>p−value</cell></row><row><cell>6</cell><cell>0.864</cell><cell>0.00</cell></row><row><cell>12</cell><cell>0.854</cell><cell>0.00</cell></row><row><cell>14</cell><cell>0.336</cell><cell>0.17</cell></row><row><cell>36</cell><cell>0.997</cell><cell>0.00</cell></row><row><cell>38</cell><cell>0.855</cell><cell>0.00</cell></row><row><cell>46</cell><cell>0.313</cell><cell>0.219</cell></row><row><cell>74</cell><cell>0.515</cell><cell>0.059</cell></row><row><cell>78</cell><cell>0.651</cell><cell>0.0415</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 7</head><label>7</label><figDesc></figDesc><table><row><cell cols="3">Spearman coefficient on the PDE project Subgraph id s−value p−value</cell></row><row><cell>6</cell><cell>0.9174</cell><cell>0.00</cell></row><row><cell>12</cell><cell>0.874</cell><cell>0.00</cell></row><row><cell>14</cell><cell>0.886</cell><cell>0.00</cell></row><row><cell>36</cell><cell>1</cell><cell>0.00</cell></row><row><cell>38</cell><cell>0.874</cell><cell>0.00</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0">IET Softw., 2019, Vol. 13 Iss. 5, pp. 355-367 © The Institution of Engineering and Technology 2018 17518814, 2019, 5, Downloaded from https://ietresearch.onlinelibrary.wiley.com/doi/10.1049/iet-sen.2018.5060 by Readcube (Labtiva Inc.), Wiley Online Library on [23/11/2022]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1">IET Softw., 2019, Vol. 13 Iss. 5, pp. 355-367 © The Institution of Engineering and Technology 2018</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="17518814" xml:id="foot_2">, 2019, 5, Downloaded from https://ietresearch.onlinelibrary.wiley.com/doi/10.1049/iet-sen.2018.5060 by Readcube (Labtiva Inc.), Wiley Online Library on [23/11/2022]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Acknowledgments</head><p>This work has been supported in part by Croatian Science Foundation's funding of the project UIP-2014-09-7945 and by the University of Rijeka Research grant no. 13.09.2.2.16.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A replicated quantitative analysis of fault distributions in complex software systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Andersson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Runeson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Softw. Eng</title>
		<imprint>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="273" to="286" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">On the distribution of bugs in the eclipse system</title>
		<author>
			<persName><forename type="first">G</forename><surname>Concas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Marchesi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Murgia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Softw. Eng</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="872" to="877" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Quantitative analysis of faults and failures in a complex software system</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">E</forename><surname>Fenton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Ohlsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Softw. Eng</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="797" to="814" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">On the probability distribution of faults in complex software systems</title>
		<author>
			<persName><forename type="first">T</forename><surname>Galinac Grbac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Huljenić</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Softw. Technol</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="page" from="250" to="258" />
			<date type="published" when="2015">2015. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A second replicated quantitative analysis of fault distributions in complex software systems</title>
		<author>
			<persName><forename type="first">T</forename><surname>Galinac Grbac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Runeson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Huljenić</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Softw. Eng</title>
		<imprint>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="462" to="476" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">On the distribution of software faults</title>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Softw. Eng</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="301" to="302" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<author>
			<persName><forename type="first">R</forename><surname>Milo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shen-Orr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Itzkovitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network motifs: simple building blocks of complex networks</title>
				<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">298</biblScope>
			<biblScope unit="page" from="824" to="827" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Petrić</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Galinac Grbac</surname></persName>
		</author>
		<title level="m">Software structure evolution and relation to system defectiveness&apos;. Proc. of the 18th Int. Conf. on Evaluation and Assessment in Software Engineering EASE2014</title>
				<meeting><address><addrLine>London, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page">10</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A systematic literature review on fault prediction performance in software engineering</title>
		<author>
			<persName><forename type="first">T</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Beecham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Bowes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Softw. Eng</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1276" to="1304" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Optimizing preventive service of software products</title>
		<author>
			<persName><forename type="first">E</forename><surname>Adams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Res. J</title>
		<imprint>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="2" to="14" />
			<date type="published" when="1984">1984, 28</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Software errors and complexity: an empirical investigation</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">R</forename><surname>Basili</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">T</forename><surname>Perricone</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Commun</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="42" to="52" />
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Reexamining the fault density-component size connection</title>
		<author>
			<persName><forename type="first">L</forename><surname>Hatton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="89" to="97" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Empirical evaluation of reliability improvement in an evolving software product line</title>
		<author>
			<persName><forename type="first">S</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Lutz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Goševa-Popstojanova</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011. 2011</date>
			<biblScope unit="page" from="103" to="112" />
			<pubPlace>New York, NY, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nagappan</surname></persName>
		</author>
		<title level="m">Predicting defects using network analysis on dependency graphs&apos;. ICSE 2008</title>
				<meeting><address><addrLine>Leipzig, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="531" to="540" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Validation of network measures as indicators of defective modules in software systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Tosun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Turhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bener</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009. 2009</date>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page">9</biblScope>
			<pubPlace>New York, NY, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Graph-based analysis and prediction for software evolution</title>
		<author>
			<persName><forename type="first">P</forename><surname>Bhattacharya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Iliofotou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Neamtiu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012. 2012</date>
			<biblScope unit="page" from="419" to="429" />
			<pubPlace>Zurich, Switzerland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">G</forename><surname>Concas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Monni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">'</forename><surname>Orru</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename></persName>
		</author>
		<title level="m">A study of the community structure of a complex software network&apos;. Proc. of the 4th Int. Workshop on Emerging Trends in Software Metrics (WETSoM)</title>
				<meeting><address><addrLine>San Francisco, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="14" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Software reliability estimate with duplicated components based on connection structure</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zhao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cybern. Inf. Technol</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="3" to="13" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName><forename type="first">Y</forename><surname>Qian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Minyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Luyi</surname></persName>
		</author>
		<title level="m">Critical nodes evaluation in large-scale software based on static structure and runtime information&apos;. IEEE Int. Conf. on Software Quality, Reliability and Security</title>
				<meeting><address><addrLine>Companion, Vancouver, BC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="186" to="187" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Program evolution: processes of software change&apos;</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Lehman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Belady</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985">1985</date>
			<publisher>Academic Press Prof., Inc</publisher>
			<pubPlace>San Diego, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Empirical studies of open source evolution</title>
		<author>
			<persName><forename type="first">J</forename><surname>Fernandez-Ramil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lozano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Wermelinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software evolution</title>
				<editor>
			<persName><forename type="first">T</forename><surname>Mens</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Demeyer</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="263" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Quality, productivity and economic benefits of software reuse: a review of industrial studies</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mohagheghi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Conradi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Empir. Softw. Eng</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="471" to="516" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">On the prediction of the evolution of libre software projects&apos;. ICSM</title>
		<author>
			<persName><forename type="first">I</forename><surname>Herraiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>González-Barahona</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Robles</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007. 2007</date>
			<biblScope unit="page" from="405" to="414" />
			<pubPlace>Paris, France</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Predicting fault incidence using software change history</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">L</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">F</forename><surname>Karr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Marron</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Softw. Eng</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="653" to="661" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Cross-project defect prediction: a large scale experiment on data vs. domain vs. process</title>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nagappan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Gall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ESEC/FSE &apos;09</title>
				<meeting>of the ESEC/FSE &apos;09<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="91" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Sub-graph mining: identifying micro-architectures in evolving object-oriented software</title>
		<author>
			<persName><forename type="first">A</forename><surname>Belderrar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kpodjedo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Guéhéneuc</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011. 2011</date>
			<biblScope unit="page" from="171" to="180" />
			<pubPlace>Oldenburg, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<title level="m">Correlation between the distribution of software bugs and network motifs&apos;. IEEE Int. Conf. on Software Quality, Reliability and Security (QRS)</title>
				<meeting><address><addrLine>Vienna</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="202" to="213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Processing and data collection of program structures in open source repositories</title>
		<author>
			<persName><forename type="first">J</forename><surname>Petrić</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Galinac Grbac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dubravac</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SQAMIA</title>
				<meeting>of SQAMIA<address><addrLine>Lovran, Croatia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014">2014. 2014</date>
			<biblScope unit="page" from="57" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A systematic data collection procedure for software defect prediction</title>
		<author>
			<persName><forename type="first">G</forename><surname>Mauša</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Galinac Grbac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Dalbelo Bašić</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">COMSIS J</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="173" to="197" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Jonckheere-Terpstra test: a non-parametric test for trend</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cardillo</surname></persName>
		</author>
		<ptr target="http://www.mathworks.com/matlabcentral/fileexchange/22159" />
		<imprint>
			<date type="published" when="2018-07">July 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Tonelli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Concas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Marchesi</surname></persName>
		</author>
		<title level="m">An analysis of SNA metrics on the Java Qualitas Corpus&apos;. Proc. of the 4th Annual India Software Engineering Conf., ISEC 2011</title>
				<meeting><address><addrLine>India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-02">February 2011</date>
			<biblScope unit="page" from="205" to="213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Analyzing maintainability and reliability of objectoriented software using weighted complex network</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">Y</forename><surname>Chong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Syst. Softw</title>
		<imprint>
			<biblScope unit="volume">110</biblScope>
			<biblScope unit="page" from="28" to="53" />
			<date type="published" when="2015">2015. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><surname>Tempero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Anslow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dietrich</surname></persName>
		</author>
		<title level="m">The Qualitas Corpus: a curated collection of Java code for empirical studies&apos;. 2010 17th Asia Pacific Software Engineering Conf. (APSEC)</title>
				<meeting><address><addrLine>Sydney, NSW, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="336" to="345" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Vrankovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Galinac Grbac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tóth</surname></persName>
		</author>
		<title level="m">Comparison of software structures in Java and Erlang programming languages&apos;. Proc. of SQAMIA 2017</title>
				<meeting><address><addrLine>Beograd, Serbia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-09">September 2017</date>
			<biblScope unit="page" from="18" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Relink: recovering links between bugs and changes</title>
		<author>
			<persName><forename type="first">R</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ESEC/FSE 11</title>
				<meeting>of ESEC/FSE 11<address><addrLine>New York, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="15" to="25" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
